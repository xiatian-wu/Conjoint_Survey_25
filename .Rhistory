color = NA
) +
geom_rect(
data = outline_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = NA, color = "black", linewidth = 0.6
) +
geom_rect(
data = terminal_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "black"
) +
scale_fill_identity() +
coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max) + 300)) +
scale_y_reverse(
limits = c(4, 0),
breaks = c(3, 2, 1),
labels = c("Future(8 yrs)", "Current(3 yrs)", "New(0 yrs)")
) +
geom_text(
data = label_i,
aes(x = 360 + 20, y = as.numeric(factor(year)), label = label),
hjust = 0, size = 3
) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour = "black", size = 9),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Save the image
ggsave(
filename = file.path(output_dir, paste0(image_filename, ".png")),
plot = p,
width = 3, height = 2, dpi = 250
)
}
# Create output directory if it doesn't exist
output_dir <- here::here("survey", "images", "battery_choices")
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
# Get unique row_ids
row_ids <- unique(df_segmented$row_id)
for (id in row_ids) {
# Filter data for this row_id
segmented_i <- df_segmented %>% filter(row_id == id)
outline_i   <- df_battery_outline %>% filter(row_id == id)
terminal_i  <- df_terminal %>% filter(row_id == id)
label_i     <- df_range_SOH_long %>% filter(row_id == id)
# Get the image name
image_filename <- label_i$image_name[1]  # Assuming it's the same for all years per row_id
# Build the plot
p <- ggplot() +
geom_rect(
data = segmented_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax,
fill = ifelse(filled, fill_color, "white")),
color = NA
) +
geom_rect(
data = outline_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = NA, color = "black", linewidth = 0.6
) +
geom_rect(
data = terminal_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "black"
) +
scale_fill_identity() +
coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max) + 300)) +
scale_y_reverse(
limits = c(4, 0),
breaks = c(3, 2, 1),
labels = c("Future(8 yrs)", "Current(3 yrs)", "New(0 yrs)")
) +
geom_text(
data = label_i,
aes(x = battery_range_max + 20, y = as.numeric(factor(year)), label = label),
hjust = 0, size = 3
) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour = "black", size = 9),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Save the image
ggsave(
filename = file.path(output_dir, paste0(image_filename, ".png")),
plot = p,
width = 3, height = 2, dpi = 250
)
}
# Get the image name
image_filename <- label_i$image_name[1]  # Assuming it's the same for all years per row_id
# Build the plot
p <- ggplot() +
geom_rect(
data = segmented_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax,
fill = ifelse(filled, fill_color, "white")),
color = NA
) +
geom_rect(
data = outline_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = NA, color = "black", linewidth = 0.6
) +
geom_rect(
data = terminal_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "black"
) +
scale_fill_identity() +
coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max) + 300)) +
scale_y_reverse(
limits = c(4, 0),
breaks = c(3, 2, 1),
labels = c("Future(8 yrs)", "Current(3 yrs)", "New(0 yrs)")
) +
geom_text(
data = label_i,
aes(x = battery_range_max + 20, y = as.numeric(factor(year)), label = label),
hjust = 0, size = 3
) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour = "black", size = 9),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
p
id=1
# Filter data for this row_id
segmented_i <- df_segmented %>% filter(row_id == id)
View(segmented_i)
View(outline_i)
# Filter data for this row_id
segmented_i <- df_segmented %>% filter(row_id == id)
outline_i   <- df_battery_outline %>% filter(row_id == id)
terminal_i  <- df_terminal %>% filter(row_id == id)
label_i     <- df_range_SOH_long %>% filter(row_id == id)
View(label_i)
View(outline_i)
View(label_i)
View(outline_i)
View(label_i)
design_rand <- design_rand %>%
mutate(battery_health_year0=1,
battery_health_year3=(1-battery_degradation)^3,
battery_health_year8=(1-battery_degradation)^8,
# round to the closest 5
battery_range_year3=round(battery_range_year0*battery_health_year3/5)*5,
battery_range_year8=round(battery_range_year0*battery_health_year8/5)*5,
# 0 decimal
battery_health_year3=round(battery_health_year3,2),
battery_health_year8=round(battery_health_year8,2)
)
df_battery_degradation<-design_rand %>%
select(battery_range_year0,battery_degradation) %>%
distinct() %>%
mutate(battery_degradation_id = row_number())
df_range_SOH<-design_rand %>%
select(contains("year")) %>%
distinct()
df_range_SOH_long <- df_range_SOH %>%
mutate(row_id = row_number()) %>%
pivot_longer(
cols = -row_id,
names_to = c("metric", "year"),
names_pattern = "(.*)_year(\\d+)",
values_to = "value"
) %>%
pivot_wider(
names_from = metric,
values_from = value
) %>%
group_by(row_id) %>%
mutate(battery_range_max = max(battery_range)) %>%
ungroup() %>%
left_join(df_battery_degradation %>% select(-battery_range_year0), by= c("row_id"="battery_degradation_id")) %>%
mutate(
year = as.numeric(year),
label = paste0(battery_range, "mi (", battery_health*100, "%)"),
image_name = paste0("Range_Degradation_",battery_range_max, "_", battery_degradation*100),
) %>%
select(-battery_degradation)
design_rand <- cbc_design(
profiles = profiles_used,
n_resp   = 2000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6    # Number of questions per respondent #6
)
# head(design_rand)
cbc_balance(design_rand)
cbc_overlap(design_rand)
# write.csv(design_rand, paste0(here(),"/survey/data/battery_choice_questions.csv"))
design_rand <- design_rand %>%
mutate(battery_health_year0=1,
battery_health_year3=(1-battery_degradation)^3,
battery_health_year8=(1-battery_degradation)^8,
# round to the closest 5
battery_range_year3=round(battery_range_year0*battery_health_year3/5)*5,
battery_range_year8=round(battery_range_year0*battery_health_year8/5)*5,
# 0 decimal
battery_health_year3=round(battery_health_year3,2),
battery_health_year8=round(battery_health_year8,2)
)
df_battery_degradation<-design_rand %>%
select(battery_range_year0,battery_degradation) %>%
distinct() %>%
mutate(battery_degradation_id = row_number())
df_range_SOH<-design_rand %>%
select(contains("year")) %>%
distinct()
df_range_SOH_long <- df_range_SOH %>%
mutate(row_id = row_number()) %>%
pivot_longer(
cols = -row_id,
names_to = c("metric", "year"),
names_pattern = "(.*)_year(\\d+)",
values_to = "value"
) %>%
pivot_wider(
names_from = metric,
values_from = value
) %>%
group_by(row_id) %>%
mutate(battery_range_max = max(battery_range)) %>%
ungroup() %>%
left_join(df_battery_degradation %>% select(-battery_range_year0), by= c("row_id"="battery_degradation_id")) %>%
mutate(
year = as.numeric(year),
label = paste0(battery_range, "mi (", battery_health*100, "%)"),
image_name = paste0("Range_Degradation_",battery_range_max, "_", battery_degradation*100),
) %>%
select(-battery_degradation)
View(df_range_SOH_long)
library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)
segments <- 100
max_battery_health <- 1
segment_width <- max_battery_health / segments
# Create visual bar representation by 100%
df_segmented <- df_range_SOH_long %>%
mutate(
row_id = factor(row_id),
fill_color = col_numeric(c("red", "yellow", "green"), domain = c(0.4, 1))(battery_health),
visual_filled = ceiling(battery_health * segments),
y_center = as.numeric(factor(year))
) %>%
uncount(weights = segments, .id = "segment") %>%
mutate(
filled = segment <= visual_filled,
xmin = (segment - 1) * segment_width,
xmax = segment * segment_width,
ymin = y_center - 0.3,
ymax = y_center + 0.3
)
# Battery outline
df_battery_outline <- df_range_SOH_long %>%
mutate(
row_id = factor(row_id),
y_center = as.numeric(factor(year)),
xmin = 0,
xmax = max_battery_health,
ymin = y_center - 0.3,
ymax = y_center + 0.3
)
# Terminal
df_terminal <-df_battery_outline %>%
mutate(
xmin = max_battery_health,
xmax = max_battery_health + 0.05,
ymin = ymin + 0.1,
ymax = ymax - 0.1
)
# Plot
ggplot() +
geom_rect(
data = df_segmented, #%>% filter(row_id==1),
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = ifelse(filled, fill_color, "white")),
color = NA
) +
geom_rect(
data = df_battery_outline,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = NA, color = "black", linewidth = 0.6
) +
geom_rect(
data = df_terminal,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "black"
) +
scale_fill_identity() +
facet_wrap(~ row_id) + #, scales = "free_y"
coord_cartesian(xlim = c(0, max_battery_health + 0.15)) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)
segments <- 100
max_battery_health <- 1
segment_width <- max_battery_health / segments
# Create visual bar representation by 100%
df_segmented <- df_range_SOH_long %>%
mutate(
row_id = factor(row_id),
fill_color = col_numeric(c("red", "yellow", "green"), domain = c(0.4, 1))(battery_health),
visual_filled = ceiling(battery_health * segments),
y_center = as.numeric(factor(year))
) %>%
uncount(weights = segments, .id = "segment") %>%
group_by(row_id, year) %>%
mutate(
total_width = unique(battery_range_max),
segment_width = total_width / segments,
filled = segment <= visual_filled,
xmin = (segment - 1) * segment_width,
xmax = segment * segment_width,
ymin = y_center - 0.3,
ymax = y_center + 0.3
) %>%
ungroup()
# Battery outline
df_battery_outline <- df_range_SOH_long %>%
mutate(
y_center = as.numeric(factor(year)),
xmin = 0,
xmax = battery_range_max,
ymin = y_center - 0.3,
ymax = y_center + 0.3
)
# Terminal
df_terminal <-df_battery_outline %>%
mutate(
xmin = battery_range_max,
xmax = battery_range_max + 15,
ymin = ymin + 0.1,
ymax = ymax - 0.1
)
# Plot
Range_SoH_full_image<-ggplot() +
geom_rect(
data = df_segmented, #%>% filter(row_id==1),
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = ifelse(filled, fill_color, "white")),
color = NA
) +
geom_rect(
data = df_battery_outline,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = NA, color = "black", linewidth = 0.6
) +
geom_rect(
data = df_terminal,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "black"
) +
scale_fill_identity() +
facet_wrap(~ row_id) + #, scales = "free_y"
coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max) + 300)) +
scale_y_reverse(limits = c(4, 0),
breaks = c(3, 2, 1),  # Positions for ticks
labels = c( "Future(8 yrs)" ,"Current(3 yrs)","New(0 yrs)"))+
geom_text(
data = df_range_SOH_long,
aes(x = battery_range_max + 20, y = as.numeric(factor(year)), label = label),
hjust = 0, size = 3
)+
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour="black", size = 9),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
ggsave(plot = Range_SoH_full_image, filename  = here::here("survey","images","battery_choices", "SoH_range_full_image.png"), width = 15, height = 12)
View(df_battery_outline)
# Filter data for this row_id
segmented_i <- df_segmented %>% filter(row_id == id)
View(segmented_i)
outline_i   <- df_battery_outline %>% filter(row_id == id)
terminal_i  <- df_terminal %>% filter(row_id == id)
label_i     <- df_range_SOH_long %>% filter(row_id == id)
View(label_i)
View(terminal_i)
View(label_i)
# Get the image name
image_filename <- label_i$image_name[1]  # Assuming it's the same for all years per row_id
# Build the plot
p <- ggplot() +
geom_rect(
data = segmented_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax,
fill = ifelse(filled, fill_color, "white")),
color = NA
) +
geom_rect(
data = outline_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = NA, color = "black", linewidth = 0.6
) +
geom_rect(
data = terminal_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "black"
) +
scale_fill_identity() +
coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max) + 300)) +
scale_y_reverse(
limits = c(4, 0),
breaks = c(3, 2, 1),
labels = c("Future(8 yrs)", "Current(3 yrs)", "New(0 yrs)")
) +
geom_text(
data = label_i,
aes(x = battery_range_max + 20, y = as.numeric(factor(year)), label = label),
hjust = 0, size = 3
) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour = "black", size = 9),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
p
# Create output directory if it doesn't exist
output_dir <- here::here("survey", "images", "battery_choices")
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
# Get unique row_ids
row_ids <- unique(df_segmented$row_id)
for (id in row_ids) {
# Filter data for this row_id
segmented_i <- df_segmented %>% filter(row_id == id)
outline_i   <- df_battery_outline %>% filter(row_id == id)
terminal_i  <- df_terminal %>% filter(row_id == id)
label_i     <- df_range_SOH_long %>% filter(row_id == id)
# Get the image name
image_filename <- label_i$image_name[1]  # Assuming it's the same for all years per row_id
# Build the plot
p <- ggplot() +
geom_rect(
data = segmented_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax,
fill = ifelse(filled, fill_color, "white")),
color = NA
) +
geom_rect(
data = outline_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = NA, color = "black", linewidth = 0.6
) +
geom_rect(
data = terminal_i,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "black"
) +
scale_fill_identity() +
coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max) + 300)) +
scale_y_reverse(
limits = c(4, 0),
breaks = c(3, 2, 1),
labels = c("Future(8 yrs)", "Current(3 yrs)", "New(0 yrs)")
) +
geom_text(
data = label_i,
aes(x = battery_range_max + 20, y = as.numeric(factor(year)), label = label),
hjust = 0, size = 3
) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour = "black", size = 9),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Save the image
ggsave(
filename = file.path(output_dir, paste0(image_filename, ".png")),
plot = p,
width = 3, height = 2, dpi = 250
)
}
shiny::runApp('survey')
here()
here()
library(surveydown)
library(tidyverse)
library(here)
library(glue)
library(dplyr)
library(kableExtra)
here()
